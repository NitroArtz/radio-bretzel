# Main Docker-Compose file. Creatiiiiing all the infrastructure
version: '2'

networks:
  bretzel:
    driver: bridge


#volumes:
# database:
#   driver : local
#   audio:
#     driver : local
#   src-conf:
#     driver : local
#   ice-conf:
#     driver : local


services:
  # The database container
  database:
    image: "mongo"
    hostname: database.bretzel
    volumes:
      - ./logs/database:/var/log
      - ./data/database:/data/db
    networks:
      bretzel:
        aliases:
          - database
          - database.bretzel

  # The backend API.
  api:
    build:
      context: ./
      dockerfile: ./conf/dockerfiles/api/Dockerfile
    # Here mounting docker socket of the host to communicate with docker's API
    volumes:
      # - src-conf:/srv/src-conf
      - ./conf/source:/srv/src-conf
      # - ice-conf:/srv/ice-conf
      - ./conf/stream:/srv/ice-conf
      # - audio:/srv/audio
      - ./data/audio:/srv/audio
      # - /var/run/docker.sock:/var/run/docker.sock
      # For dev, we mount source code
      - ./api:/usr/src/app
    ports:
      - "1337:1337"
    depends_on:
      - "database"
    image: api-bretzel
    hostname: api.bretzel
    networks:
      bretzel:
        aliases:
          - api
          - api.bretzel


  # The streaming server container. Here we're using Icecast2, allowing us to send our source data through http.
  stream-test:
    build:
      context: ./
      dockerfile: ./conf/dockerfiles/stream/Dockerfile
    # In a security concern, we should take a look at making it work without exposing another port of the host (for example using separated network)
    ports:
      - "8000:8000"
    volumes:
      # - ice-conf:/etc/icecast
      - ./conf/stream:/etc/icecast
    image: stream-bretzel
    hostname: stream-test.bretzel
    depends_on:
      - "api"
    # Adding to the bretzel network
    networks:
      bretzel:
        aliases:
          - stream-test
          - stream-test.bretzel

  # The source container. This one is a test, but it's used as a default image for any instance of a source container.
  source-test:
    env_file:
      - ./conf/source/stream-test.bretzel/stream-conf.env
      - ./conf/source/stream-test.bretzel/test/conf.env
    build:
      context: ./
      dockerfile: ./conf/dockerfiles/source/Dockerfile
    # naming the image
    image: source-bretzel
    hostname: source-test.bretzel
    # In order to successfully run, the source containers must connect to an already existant and running stream server, authenticate and start sending data to it.
    depends_on:
      - "stream-test"
    volumes:
      # Uncomment these for prod
      # - src-conf:/home/source/conf:ro
      # - audio:/home/source/audio:ro
      - ./data/audio:/home/source/audio:ro
      - ./conf/source:/home/source/conf:ro
    # We include the sourcetest in the bretzel network.
    networks:
      bretzel:
        aliases:
          - source-test
          - source-test.bretzel

  # TEMPORARY -- Frontend web interface
  frontend:
    build:
      context: ./
      dockerfile: ./conf/dockerfiles/frontend/Dockerfile
    # We choose for dev to mount source code. By this, we can see our changing just by restarting this signle container. Of course, this line should be removed for prod.
    volumes:
      - ./frontend/server/src:/usr/src/app/src
    image: frontend-bretzel
    hostname: frontend.bretzel
    # We bind port 80 of host to port 8082 of the container. Feel free to bind the host's port of your choice, but make sure it's not already used !
    ports:
      - "80:8082"
    depends_on:
      - "api"
    # We add this container to both networks for now.
    networks:
      # Adding it to the bretzel network
      bretzel:
        aliases:
          - frontend
          - frontend.bretzel
