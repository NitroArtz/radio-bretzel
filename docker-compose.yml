# Main Docker-Compose file. Creatiiiiing all the infrastructure
version: '2'

networks:
  default:
    driver: bridge
    ipam:
      config:
        # Here we use a /24 mask, permitting ~ 250 free IP for new streaming containers. The IP and the mask can be addapted, allowing a large or less large number of containers. Feel free to change it
      - subnet: 18.18.18.0/24

# Volumes
volumes:
  database:
    driver : local
  audio:
    driver : local
  src-conf:
    driver : local
  ice-conf:
    driver : local


# Now, the services.
services:
  # First, the source container. This one is a test, but it's used as a default image for any instance of a source container.
  source-test:
    env_file:
      - ./liquidsoap/conf/icecast-test.bretzel/icecast-conf.env
      - ./liquidsoap/conf/icecast-test.bretzel/test/conf.env
    build:
      context: ./liquidsoap/
      dockerfile: Dockerfile
    # naming the image
    image: source-bretzel
    hostname: source-test.bretzel
    # In order to successfully run, the source containers must connect to an already existant and running icecast server, authenticate and start sending data to it.
    depends_on:
      - "icecast-test"
    volumes:
      # Uncomment these for prod
      # - src-conf:/home/liquy/conf:ro
      # - audio:/home/liquy/audio:ro
      - ./audio/:/home/liquy/audio/:ro
      - ./liquidsoap/conf/:/home/liquy/conf/:ro
    # We include the sourcetest in the default network.
    networks:
      default:
        aliases:
          - source-test
          - source-test.bretzel


  # Second, the streaming server container. Here we're using Icecast2, allowing us to send our source data through http.
  icecast-test:
    build:
      context: ./icecast/
      dockerfile: Dockerfile
    # Here, we're binding port 8000 on the host. This allows us to go on icecast server web interface.
    # In a security concern, we should take a look at making it work without exposing another port of the host (for example using default network)
    ports:
      - "8000:8000"
    volumes:
      # - ice-conf:/etc/icecast
      - ./icecast/conf/:/etc/icecast/
    image: icecast-bretzel
    hostname: icecast-test.bretzel
    # Adding to the default network
    networks:
      default:
        aliases:
          - icecast-test
          - icecast-test.bretzel

  # TEMPORARY -- Frontend web interface
  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    # We choose for dev to mount source code. By this, we can see our changing just by restarting this signle container. Of course, this line should be removed for prod.
    volumes:
      - ./frontend/server/src:/usr/src/app/src
    image: frontend-bretzel
    hostname: frontend.bretzel
    # We bind port 80 of host to port 8082 of the container. Feel free to bind the host's port of your choice, but make sure it's not already used !
    ports:
      - "80:8082"
    # We add this container to both networks for now.
    networks:
      # Adding it to the default network
      default:
        aliases:
          - frontend
          - frontend.bretzel

  # The backend API.
  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile
    # Here mounting docker socket of the host to communicate with docker's API
    volumes:
      # - src-conf:/srv/src-conf
      - ./liquidsoap/conf/:/srv/src-conf/
      # - ice-conf:/srv/ice-conf
      - ./icecast/conf/:/srv/ice-conf/
      # - audio:/srv/audio
      - ./audio/:/srv/audio/
      # - /var/run/docker.sock:/var/run/docker.sock
      # For dev, we mount source code
      - ./backend/backend/:/usr/src/app/
    ports:
      - "1337:1337"
    depends_on:
      - "database"
    image: backend-bretzel
    hostname: backend.bretzel
    networks:
      default:
        aliases:
          - backend
          - backend.bretzel

  # The database container
  database:
    env_file:
      - ./database/mysql-server.env
    image: "mysql/mysql-server:5.7"
    hostname: database.bretzel
    volumes:
      - database:/var/lib/mysql
    networks:
      default:
        aliases:
          - database
          - database.bretzel
