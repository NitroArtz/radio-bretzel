# Main Docker-Compose file. Creatiiiiing all the infrastructure
version: '2'

# For this we need 2 networks :
networks:
  # This first network is the main, where all the containers will talk to each other in.
  main:
      driver: bridge
      ipam:
        config:
          # Here we use a /24 mask, permitting ~ 250 free IP for new source containers. The IP and the mask can be addapted, allowing a large or less large number of containers.
        - subnet: 18.18.18.0/24
  # This second network allows the backend container to call docker's API through a TCP socket. We don't need it now, that's why it's commented
  # tohost:
  #   driver: bridge
  #   ipam:
  #     config:
  #       # Here, we use a /30 mask to allow only 2 effectives IP on the network, once for the backend container and the other for the host.
  #       - subnet: 18.18.19.0/30

# Feel free to change any network's IP, but make sure "tohost"'s network have a /30 mask.

# Now, the services.
services:
  # First, the source container. This one is a test, but it's used as a default image for any instance of a source container.
  source-test:
    build:
      context: ./liquidsoap/
      dockerfile: Dockerfile
    volumes:
      # mounting project files for development. This line will be removed for prod
      - ./liquidsoap/test:/home/liquy/var
    # naming the image
    image: source-bretzel
    hostname: source-test.bretzel
    # In order to successfully run, the source containers must connect to an already existant and running icecast server, authenticate and start sending data to it.
    depends_on:
      - "icecast"
    # We include the sourcetest in the main network.
    networks:
      main:
        aliases:
          - source-test
          - source-test.bretzel


  # Second, the streaming server container. Here we're using Icecast2, allowing us to send our source data through http.
  icecast:
    build:
      context: ./icecast/
      dockerfile: Dockerfile
    # Here, we're binding port 8000 on the host. This allows us to go on icecast server web interface.
    # In a security concern, we should take a look at making it work without exposing another port of the host (for example using main network)
    ports:
      - "8000:8000"
    volumes:
      - ./icecast/icecast.xml:/etc/icecast/icecast.xml
    image: icecast-bretzel
    hostname: icecast.bretzel
    # Adding to the main network
    networks:
      main:
        aliases:
          - icecast
          - icecast.bretzel

  # The frontend server. Here's handled the web interface through a nodejs server. Later, this server will be able to communicate with the API of the backend server.
  frontend:
    build:
      context: ./node/
      dockerfile: Dockerfile
    # We choose for dev to mount source code. By this, we can see our changing just by restarting this signle container. Of course, this line should be removed for prod.
    volumes:
      - ./node/server/src:/usr/src/app/src
    image: frontend-bretzel
    hostname: frontend.bretzel
    # We bind port 80 of host to port 8082 of the container. Feel free to bind the host's port of your choice, but make sure it's not already used !
    ports:
      - "80:8082"
    # We add this container to both networks for now.
    networks:
      # Adding it to the main network
      main:
        aliases:
          - frontend
          - frontend.bretzel
      # For now, we use this frontend server as backend too. Backend must be able to communicate with the docker API of the host. We include it to the "tohost" network and force his IP address.
      # tohost:
      #   aliases:
      #     - appbackend
      #     - appbackend.tohost
      #   # We force its IP address in order to whitelist it from the host. If you changed this address, make sure to put the same in your dockerd conf file !
      #   ipv4_address: 18.18.19.2
